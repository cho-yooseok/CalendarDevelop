CalendarDevelop 애플리케이션 동작 흐름 설명

전체구조
컨트롤러(Controller) : 사용자의 요청을 받아 처리한다
(예 : AuthController, MemberController, ScheduleController)

서비스(Service) : 비즈니스 로직을 처리한다 (예 : AuthService, MemberService, ScheduleService)

리포지토리(Repository) : 데이터베이스와의 통신을 담당한다 (예 : MemberRepository, ScheduleRepository)

엔티티(Entity) : 데이터베이스 테이블과 매핑되는 객체 (Member, Schedule)

DTO(Data Transfer Object) : 데이터 전송을 위한 객체 (예 : LoginRequestDto, MemberResponseDto)


주요 기능 및 흐름
회원 가입
1. 회원가입 :
사용자가 회원 가입정보 (이름, 이메일 비밀번호)를 입력
/members 엔드포인트로 POST요청이 전송
MemberController 가 요청을 받아 MemberService로 전달
MemberService 는 이메일 중복 확인 후 회원 정보를 MemberRepository를 통해 데이터 베이스에 저장
저장된 회원 정보가 응답으로 반환

2. 로그인
사용자가 이메일과 비밀번호를 입력
/login 엔드포인트로 POST요청이 전송
AuthController 가 요청을 받아 AuthService 로 전달
AuthService 는 이메일과 비밀번호가 일치하는 회원을 찾고 , 세션에 회원 ID를 저장한다
로그인 성공 응답이 반환된다

3. 로그아웃
/logout 엔드포인트로 GET 요청이 전송
AuthController 가 요청을 받아 AuthService 로 전달한다
AuthService는 세션에서 회원 정보를 제거하고 세션을 무효화한다
로그아웃 성공 응답이 반환된다




일정관리
1. 일정 등록
로그인한 사용자가 일정정보(제목,내용)를 입력한다
/members/{memberId}/schedules 엔드포인트로 POST요청이 전송된다
ScheduleController 가 요청을 받아 ScheduleService 로 전달한다
ScheduleService는 일정 정보를 ScheduleRepository를 통해 데이터베이스에 저장합니다
저장된 일정 정보가 응답으로 반환됩니다

2. 일정조회
/members/{memberId}/schedules 엔드포인트로 GET 요청이 전송됩니다
ScheduleController 가 요청을 받아 ScheduleService 로 전달합니다
ScheduleService는 memberId에 해당하는 모든 일정을 ScheduleRepository를 통해 조회합니다
조회된 일정 정보가 응답으로 반환됩니다

3. 일정수정
사용자가 일정 정보(제목,내용)을 수정합니다
/members/{memberId}/schedules/{id} 엔드포인트로 PUT 요청이 전송됩니다
ScheduleController 가 요청을 받아 ScheduleService로 전달합니다
ScheduleService는 일정의 소유자를 확인한 후 일정 정보를 업데이트합니다
업데이트된 일정정보가 응답으로 반환됩니다

4. 일정 삭제
/members/{memberId}/schedules/{id} 엔드포인트로 DELETE 요청이 전송됩니다
ScheduleController 가 요청을 받아 ScheduleService 로 전달합니다
ScheduleService는 일정의 소유자를 확인하고 비밀번호를 검증한 후 일정을 삭제합니다
삭제 성공 응답이 반환됩니다





인증 및 보안
1. 세션 기반 인증
로그인 시 세션에 사용자ID가 저장됩니다
로그아웃 시 세션이 무효화됩니다
AuthenticationFilter가 요청마다 세션을 확인하여 인증여부를 검사합니다

2. 예외 처리
GlobalExceptionHandler 가 각종 예외를 처리하여 적절한 오류 메시지와 상태코드를 반환합니다
ApplicationException,AuthenticationException,PasswordMismatchException 등 다양한 예외가 정의되어있다




데이터베이스 구조
애플리케이션은 MySQL 데이터를 사용하며, 다음과 같은 테이블이 있다.
1. member 테이블
회원 정보를 저장한다 (id, name, email, password, created_at, updated_at)

2. schedule 테이블
일정 정보를 저장한다 (id, title, content, member_id, created_at, updated_at)




요약
CalendarDevelop 애플리케이션  동작흐름은 다음과 같다
1. 사용자가 회원 가입을 하고 로그인한다
2. 로그인한 사용자는 자신의 일정을 등록, 조회, 수정, 삭제할 수 있다.
3. 모든 요청은 인증 필터를 거쳐 권한을 확인한다
4. 예외가 발생하면 GlobalExceptionHandler 가 처리한다

이 애플리케이션은 SpringBoot의 일반적인 MVC(Model-View-Controller) 패턴을 따르고 있으며,
RESTful API 를  제공하여 클라이언트와 통신한다
데이터베이스 엑세스는 SpringData JPA를 통해 이루어진다.
